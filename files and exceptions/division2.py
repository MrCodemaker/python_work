"""
Правильная обработка ошибок особенно важна в том случае, если программа должна 
продолжить работу после возникновения ошибки. Такая ситуация часто встречается 
в программах, запрашивающих данные у пользователя. Если программа правильно 
среагировала на некорректный ввод, она может запросить новые данные после сбоя. 

Создадим простой калькулятор, который выполняет только операцию деления:
"""

print("Give me two numbers, and I'll divide them.")
print("Enter 'q' to quit.")

while True:
    first_number = input("\nFirst number: ")
    if first_number == 'q':
        break
    second_number = input("Second number: ")
    if second_number == 'q':
        break
        try:
    answer = int(first_number) / int(second_number)
        except ZeroDivisionError:
            print("You can't divide by 0!")
        else:
    print(answer)

"""
Блок try-except-else работает так: Python пытается выполнить код в блоке try. 
В блоках try следует размещать только тот код, при выполнении которого может 
возникнуть исключение. Иногда некоторый код должен выполняться только 
в том случае, если выполнение try прошло успешно; такой код размещается 
в блоке else. Блок except сообщает Python, что делать, если при выполнении 
кода try произошло определенное исключение. Заранее определяя вероятные 
источники ошибок, вы повышаете надежность своих программ, которые продолжают 
работать даже при вводе некорректных данных или при недоступности ресурсов. 
Ваш код оказывается защищенным от случайных ошибок пользователей 
и сознательных атак.
"""